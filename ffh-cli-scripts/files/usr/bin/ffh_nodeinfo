#!/bin/sh

nodeinfo=$(gluon-neighbour-info -d ::1 -p 1001 -r nodeinfo -c 1)
statistics=$(gluon-neighbour-info -d ::1 -p 1001 -r statistics -c 1)

get() {
	echo "$nodeinfo" | jsonfilter -e "@.$1"
}

get_bool() {
	res=$(echo "$nodeinfo" | jsonfilter -e "@.$1")
	bool_to_text "$res" $2 $3
}

bool_to_text() {
	if [ "$1" == "true" -o "$1" == "1" ]; then
		echo "${2}"
	else
		echo "${3}"
	fi
}

stat() {
	echo "$statistics" | jsonfilter -e "@.$1"
}

uci_bool() {
	res=$(uci get $1 2> /dev/null)
	bool_to_text "$res" "$2" "$3"
}

get_vpn() {
	if [ "$(get software.fastd.enabled)" == "true" ]; then
		echo "fastd"
	elif [ "$(get software.wireguard.enabled)" == "true" ]; then
		echo "wireguard"
	else
		echo "disabled"
	fi
}


cat <<EOF

     hostname: $(get hostname)
      node_id: $(get node_id)
        owner: $(get owner.contact)
     location: lat=$(get location.latitude) lon=$(get location.longitude)
        model: $(get hardware.model)

  autoupdater: $(get_bool software.autoupdater.enabled enabled disabled), branch: $(get software.autoupdater.branch)
          vpn: $(get_vpn)
     firmware: $(get software.firmware.release)
       domain: $(get system.domain_code)

   vpn pubkey: $(get software.fastd.public_key)$(get software.wireguard.public_key)

  mesh on lan: $(get_bool network.mesh_lan.disabled active no)
  mesh on wan: $(get_bool network.mesh_wan.disabled active no)

EOF

for radio in $(uci show wireless 2> /dev/null | grep -e ^wireless.radio | cut -d '.' -f 2 | grep -v wifi-device | uniq); do
	echo " wifi channel: "$(uci get wireless.${radio}.channel)$(uci_bool gluon-core.@wireless[0].preserve_channels " (preserved)" "")
done

if [ -f /sys/kernel/debug/batman_adv/bat0/transtable_local ]; then
	echo
	echo " wifi clients: $(grep -cEo "\[.*W.*\]+" /sys/kernel/debug/batman_adv/bat0/transtable_local)"
	echo
fi
